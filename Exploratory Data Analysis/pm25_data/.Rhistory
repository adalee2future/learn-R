size(approx1)
approx10 <- svd1$u[, 1:10] %*% diag(svd$d[1:10]) %*% t(svd1$v[, 1:10])
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10])
approx1 <- svd1$u[, 1] %*% t(svd1$v[, 1] * svd1$d[1])  ## %*% is matrix multiplication
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10])
par(mfrow = c(1, 4))
image(t(approx1)[, nrow(approx1):1], main - "(a)")
image(t(approx5)[, nrow(approx5):1], main - "(b)")
image(t(approx10)[, nrow(approx10):1], main - "(c)")
image(t(faceData)[, nrow(faceData):1], main - "(d)")
par(mfrow = c(1, 4))
image(t(approx1)[, nrow(approx1):1], main = "(a)")
image(t(approx5)[, nrow(approx5):1], main = "(b)")
image(t(approx10)[, nrow(approx10):1], main = "(c)")
image(t(faceData)[, nrow(faceData):1], main = "(d)")
download.file("http://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf", "a.pdf")
x <- rnorm(10)
plot(x)
par(mfrow = c(1, 1))
x <- rnorm(10)
plot(x, col = 1)
?plot
plot(x, col = 2)
plot(x, col = 3)
hear.colors()
heat.colors()
?heat.colors
heat.colors(1)
heat.colors(2)
heat.colors(2,alpha = 2)
heat.colors(2)
heat.colors(4)
x <- heat.colors(100)
plot(x)
x
?heat.colors
# A Color Wheel
pie(rep(1, 12), col = rainbow(12))
##------ Some palettes ------------
demo.pal <-
function(n, border = if (n < 32) "light gray" else NA,
main = paste("color palettes;  n=", n),
ch.col = c("rainbow(n, start=.7, end=.1)", "heat.colors(n)",
"terrain.colors(n)", "topo.colors(n)",
"cm.colors(n)"))
{
nt <- length(ch.col)
i <- 1:n; j <- n / nt; d <- j/6; dy <- 2*d
plot(i, i+d, type = "n", yaxt = "n", ylab = "", main = main)
for (k in 1:nt) {
rect(i-.5, (k-1)*j+ dy, i+.4, k*j,
col = eval(parse(text = ch.col[k])), border = border)
text(2*j,  k * j + dy/4, ch.col[k])
}
}
n <- if(.Device == "postscript") 64 else 16
# Since for screen, larger n may give color allocation problem
demo.pal(n)
gray()
?gray
gray(1)
gray(2)
gray(0.1)
pal <- colorRamp(c("red", "blue"))
pal(0)
x <- 1:10
x[1]
x(1)
pal
xxx <- colorRamp(c("red", "blue"))
xxx
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(1/3)
pal(2/3)
seq(0,1,len=10)
pal(seq(0, 1, len = 10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
pal
x
x <- rnorm(10)
plot(x, col = pal(2)[1])
plot(x, col = pal(2)[2])
plot(x, col = pal(10)[1])
plot(x, col = pal(10)[2])
plot(x, col = pal(10)[3])
plot(x, col = pal(10)[4])
plot(x, col = pal(10)[5])
plot(x, col = pal(10)[6])
plot(x, col = pal(10)[7])
plot(x, col = pal(10)[8])
plot(x, col = pal(10)[9])
plot(x, col = pal(10)[10])
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
library(RColorBrewer)
?RColorBrewer
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
pal
pal(20)
?brewer.pal
image(volcano, col = pal(10))
image(volcano, col = pal(20))
image(volcano, col = pal(200))
image(volcano, col = pal(2))
image(volcano, col = pal(10))
image(volcano, col = pal(20))
image(volcano, col = pal(40))
image(volcano, col = pal(80))
image(volcano, col = pal(800))
image(volcano, col = pal(80000))
x <- rnorm(10000)
y <- rnorm(1000)
smoothScatter(x, y)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
scatter(x, y)
?scatter
??scatter
plot(x, y)
par(mfrow = c(1, 2))
plot(x, y)
smoothScatter(x, y)
?par
par(tck = 1)
plot(x, y)
smoothScatter(x, y)
par(tck = 0)
plot(x, y)
smoothScatter(x, y)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
download.file("http://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf", "./ADAfaEPoV.pdf")
download.file("http://www.stat.cmu.edu/~cshalizi/ADAfaEPoV/ADAfaEPoV.pdf", "./ADAfaEPoV.pdf")
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
## scatter plot with no transparency
plot(x, y, pch = 19)
par(mfrow = c(1, 2))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x, y)
plot(x, y, pch = 19)
plot(x, y, col = rgb(0, 0, 0, 0.2), pch = 19)
plot(x, y, col = rgb(1, 0, 0, 0.2), pch = 19)
plot(x, y, col = rgb(100, 0, 0, 0.2), pch = 19)
plot(x, y, col = rgb(1, 1, 0, 0.2), pch = 19)
load("data/samsungData.rda")
names(samsungData)
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
samsungData$activity
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
par(mfrwo = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sun1)[2])
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sun1)[2])
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottom right", legend - unique(sub1$activity), col = unique(sub1$activity), pch = 1)
legend("bottomright", legend - unique(sub1$activity), col = unique(sub1$activity), pch = 1)
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity), pch = 1)
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity), pch = 1)
samsungData$activity
factor(samsungData$activity)
unclass(sub1$activity)
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order],
col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myclust(hclustering, lab.col = unclass(sub1$activity))
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order],
col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
par(mfrow = c(1, 1))
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order],
col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
par(mfrow = c(1, 1))
myplclust <- function( hclust, lab=hclust$labels, lab.col=rep(1,length(hclust$labels)), hang=0.1,...){
## modifiction of plclust for plotting hclust objects *in colour*!
## Copyright Eva KF Chan 2009
## Arguments:
##    hclust:    hclust object
##    lab:        a character vector of labels of the leaves of the tree
##    lab.col:    colour for the labels; NA=default device foreground colour
##    hang:     as in hclust & plclust
## Side effect:
##    A display of hierarchical cluster with coloured leaf labels.
y <- rep(hclust$height,2)
x <- as.numeric(hclust$merge)
y <- y[which(x<0)]
x <- x[which(x<0)]
x <- abs(x)
y <- y[order(x)]
x <- x[order(x)]
plot( hclust, labels=FALSE, hang=hang, ... )
text( x=x, y=y[hclust$order]-(max(hclust$height)*hang), labels=lab[hclust$order],
col=lab.col[hclust$order], srt=90, adj=c(1,0.5), xpd=NA, ... )
}
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
source("myplclust.R")
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
par(mfrow = c(1, 2))
plot(sub1[, 10], pch = 19, col = sub1$activity, ylab = names(sub1)[10])
plot(sub1[, 11], pch = 19, col = sub1$activity, ylab = names(sub1)[11])
svd1 <- svd(scale(sub1[, c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
sub1
svd1 = svd(scale(sub1[, -c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
plot(svd1$v[, 2], pch = 19)
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
par(mfrow = c(1, 1))
plot(svd1$v[, 2], pch = 19)
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(samsungData)[maxContrib]
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
plot(kClust$center[1, 1:10], pch = 19, ylab = "Cluster Center", xlab = "")
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
plot(kClust$center[1, 1:10], pch = 19, ylab = "Cluster Center", xlab = "")
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
## plotting average accelaration for first subject
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity), pch = 1)
## clustering based just on average acceleration
par(mfrow = c(1, 1))
source("myplclust.R")
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
## plotting max acceleration for the first subject
par(mfrow = c(1, 2))
plot(sub1[, 10], pch = 19, col = sub1$activity, ylab = names(sub1)[10])
plot(sub1[, 11], pch = 19, col = sub1$activity, ylab = names(sub1)[11])
## singular value decomposition
svd1 = svd(scale(sub1[, -c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
## find maximum contributor
par(mfrow = c(1, 1))
plot(svd1$v[, 2], pch = 19)
## new clustering with maximum contributor
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(samsungData)[maxContrib]
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 1)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 1)
table(kClust$cluster, sub1$activity)
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
## plotting average accelaration for first subject
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity), pch = 1)
## clustering based just on average acceleration
par(mfrow = c(1, 1))
source("myplclust.R")
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
## plotting max acceleration for the first subject
par(mfrow = c(1, 2))
plot(sub1[, 10], pch = 19, col = sub1$activity, ylab = names(sub1)[10])
plot(sub1[, 11], pch = 19, col = sub1$activity, ylab = names(sub1)[11])
## singular value decomposition
svd1 = svd(scale(sub1[, -c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
## find maximum contributor
par(mfrow = c(1, 1))
plot(svd1$v[, 2], pch = 19)
## new clustering with maximum contributor
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(samsungData)[maxContrib]
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
## plotting average accelaration for first subject
par(mfrow = c(1, 2), mar = c(5, 4, 1, 1))
samsungData <- transform(samsungData, activity = factor(activity))
sub1 <- subset(samsungData, subject == 1)
plot(sub1[, 1], col = sub1$activity, ylab = names(sub1)[1])
plot(sub1[, 2], col = sub1$activity, ylab = names(sub1)[2])
legend("bottomright", legend = unique(sub1$activity), col = unique(sub1$activity), pch = 1)
## clustering based just on average acceleration
par(mfrow = c(1, 1))
source("myplclust.R")
distanceMatrix <- dist(sub1[, 1:3])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
## plotting max acceleration for the first subject
par(mfrow = c(1, 2))
plot(sub1[, 10], pch = 19, col = sub1$activity, ylab = names(sub1)[10])
plot(sub1[, 11], pch = 19, col = sub1$activity, ylab = names(sub1)[11])
## singular value decomposition
svd1 = svd(scale(sub1[, -c(562, 563)]))
par(mfrow = c(1, 2))
plot(svd1$u[, 1], col = sub1$activity, pch = 19)
plot(svd1$u[, 2], col = sub1$activity, pch = 19)
## find maximum contributor
par(mfrow = c(1, 1))
plot(svd1$v[, 2], pch = 19)
## new clustering with maximum contributor
maxContrib <- which.max(svd1$v[, 2])
distanceMatrix <- dist(sub1[, c(10:12, maxContrib)])
hclustering <- hclust(distanceMatrix)
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(samsungData)[maxContrib]
## kmeans clustering (nstart=1, first try)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 1)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[, -c(562, 563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
plot(kClust$center[1, 1:10], pch = 19, ylab = "Cluster Center", xlab = "")
setwd("pm25_data")
getwd()
setwd("pm25_data")
list.files()
pm0 <- read.table("RD_501_88101_1999-0.txt", comment.char = "#", header = FALSE,
sep = "|", na.strings = "")
pm0 <- read.table("RD_501_88101_1999-0.txt", comment.char = "#", header = FALSE,
sep = "|", na.strings = "")
dim(pm0)
head(pm0)
cnames <- readLines("RD_501_88101_1999-0.txt", 1)
cnames
cnames <- strsplit(cnames, "|", fixed = "TRUE")
cnames
cnames
cnames[[1]]
cnames <- strsplit(cnames, "|", fixed = "TRUE")
names(pm0) <- cnames[[1]]
head(pm0)
length(cnames)
length(cnames[[1]])
names(pm0) <- make.names(cnames[[1]])
names(pm0)
head(pm0)
x0 <- pm0$Sample.Value
class(x0)
str(x0)
summary(x0)
mean(is.na(x0))
list.files()
dim(pm1)
pm1 <- read.table("RD_501_88101_2012-0.txt", comment.char = "#", header = FALSE,
sep = "|", na.strings = "")
dim(pm1)
names(pm1) <- make.names(cnames[[1]])
head(pm1)
x1 <- pm1$Sample.Value
str(x1)
summary(x1)
summary(x0)
means(is.na(x1))
mean(is.na(x1))
